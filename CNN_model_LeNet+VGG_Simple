# import 
import tensorflow as tf
from tensorflow import keras
import numpy as np
import os
import re
from PIL import Image
import shutil
import xml.etree.ElementTree as et
from sklearn.model_selection import train_test_split
import random
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import gdown
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Data dir
data_dir = "yout path/data"

datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

# TRAIN_GENERATOR
train_generator = datagen.flow_from_directory(
    data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

# VALIDATION GENERATOR
validation_generator = datagen.flow_from_directory(
    data_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)


# CNN MODEL 
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(train_generator.num_classes, activation='softmax')
])

# MODEL COMPILE
model.compile(optimizer='adam',  # Adam 옵티마이저 사용
              loss='categorical_crossentropy',  # 다중 클래스 분류를 위한 크로스엔트로피 손실 함수 사용
              metrics=['accuracy'])  # 모델의 정확도를 평가 지표로 사용

# MODEL PRINT
model.summary()

#  ImageDataGenerator 
train_datagen = ImageDataGenerator(rescale=1./255)

# Validation data 
train_generator = train_datagen.flow_from_directory(
    data_dir,  
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'  
)

# CLASS INDEX
class_indices = train_generator.class_indices
print("Class indices:", class_indices)

# CLASS INDEX:MAPPING
for class_name, index in class_indices.items():
    print(f"Class: {class_name}, Index: {index}")

#  fit() method model train
history = model.fit(
    train_generator,
    epochs=50,
    validation_data=validation_generator
)

print(os.getcwd())

loss, accuracy = model.evaluate(validation_generator)
print(f"Validation Accuracy: {accuracy:.4f}%")  
print(f"Validation Loss: {loss:.4f}")  

# MODEL SAVE
model.save('"yout path/data"')


# Visualize learning outcomes
import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(epochs, acc, 'b', label='Training accuracy')
plt.plot(epochs, val_acc, 'r', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(epochs, loss, 'b', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()
